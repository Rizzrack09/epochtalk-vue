// Misc Mixins
@charset "UTF-8";

// Page Break Mixins
@mixin break-mobile-xs {
  @media screen and (max-width: #{$small}) {
    @content;
  }
}

@mixin break-mobile-sm {
  @media screen and (max-width: #{$tablet}) {
    @content;
  }
}

@mixin break-mobile-med {
  @media screen and (max-width: #{$medium}) {
    @content;
  }
}

@mixin break-mobile-tablet {
  @media screen and (min-width: #{$tablet}) {
    @content;
  }
}

@mixin break-max-mobile-tablet {
  @media screen and (max-width: #{$tablet}) {
    @content;
  }
}

@mixin break-min-large {
  @media screen and (min-width: #{$large}) {
    @content;
  }
}

@mixin break-max-large {
  @media screen and (max-width: #{$large}) {
    @content;
  }
}

@mixin break-max-xlarge {
  @media screen and (max-width: #{$xlarge}) {
    @content;
  }
}


@mixin break-min-desktop {
  @media screen and (min-width: #{$desktop}) {
    @content;
  }
}

@mixin break-max-desktop {
  @media screen and (max-width: #{$desktop}) {
    @content;
  }
}

// Grid Layout Mixins
$grid-2-column: 1fr $sidebarWidth;

@mixin grid-base-layout {
  display: grid;
  column-gap: 2rem;
  row-gap: 0;
}

@mixin grid-columns-base {
  grid-template-columns: minmax(0, 3fr) minmax($sidebarWidth, 1fr);
}

@mixin grid-columns {
  grid-template-columns: $grid-2-column;
}

@mixin label($type, $font-size: 0.6875rem, $border-radius: 2px, $padding: 0.25rem 0.5rem 0.25rem) {
  @include border-radius($border-radius);
  font-weight: normal;
  text-align: center;
  display: inline-block;
  position: relative;
  padding: $padding;
  font-size: $font-size;
  @if $type == error {
    background-color: #f04124;
    color: #FFFFFF;
  }
  @else if $type == warning {
    background-color: #f08a24;
    color: #FFFFFF;
  }
  @else if $type == success {
    background-color: #43AC6A;
    color: #FFFFFF;
  }
  @else if $type == info {
    background-color: #a0d3e8;
    color: #333333;
  }
  @else {
    background-color: #e7e7e7;
    color: #333333;
  }
}

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin pad($padding: flex-gutter()) {
  $padding-list: null;
  @each $value in $padding {
    $value: if($value == 'default', flex-gutter(), $value);
    $padding-list: join($padding-list, $value);
  }
  padding: $padding-list;
}

@mixin no-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
}

@mixin set-columns($cols: 2, $spacing: 0) {
  -moz-column-count: $cols;
  -webkit-column-count: $cols;
  -o-column-count:$cols;
  column-count: $cols;
  -moz-column-gap: $spacing;
  -webkit-column-gap: $spacing;
  -o-column-gap: $spacing;
  column-gap: $spacing;
}

@mixin info-text($size: $font-size-sm) {
  color: $secondary-font-color;
  font-size: $size;
}

@mixin truncate-ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin list-clean {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

@mixin list-flat {
  display: inline-block;
  padding-right: 1rem;
  &:last-child {
    padding-right: 0;
  }
}

@mixin bg-cover {
  -webkit-background-size:  cover;
  -moz-background-size:     cover;
  background-size:          cover;
}

@mixin label($type, $font-size: 0.6875rem, $border-radius: 2px, $padding: 0.25rem 0.5rem 0.25rem) {
  @include border-radius($border-radius);
  font-weight: normal;
  text-align: center;
  display: inline-block;
  position: relative;
  padding: $padding;
  font-size: $font-size;
  @if $type == error {
    background-color: #f04124;
    color: #FFFFFF;
  }
  @else if $type == warning {
    background-color: #f08a24;
    color: #FFFFFF;
  }
  @else if $type == success {
    background-color: #43AC6A;
    color: #FFFFFF;
  }
  @else if $type == info {
    background-color: #a0d3e8;
    color: #333333;
  }
  @else {
    background-color: #e7e7e7;
    color: #333333;
  }
}

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
  }
}

@mixin transition($properties...) {
  // Fix for vendor-prefix transform property
  $needs-prefixes: false;
  $webkit: ();
  $moz: ();
  $spec: ();

  // Create lists for vendor-prefixed transform
  @each $list in $properties {
    @if nth($list, 1) == "transform" {
      $needs-prefixes: true;
      $list1: -webkit-transform;
      $list2: -moz-transform;
      $list3: ();

      @each $var in $list {
        $list3: join($list3, $var);

        @if $var != "transform" {
          $list1: join($list1, $var);
          $list2: join($list2, $var);
        }
      }

      $webkit: append($webkit, $list1);
      $moz:    append($moz,    $list2);
      $spec:   append($spec,   $list3);
    } @else {
      $webkit: append($webkit, $list, comma);
      $moz:    append($moz,    $list, comma);
      $spec:   append($spec,   $list, comma);
    }
  }

  @if $needs-prefixes {
    -webkit-transition: $webkit;
       -moz-transition: $moz;
            transition: $spec;
  } @else {
    @if length($properties) >= 1 {
      @include prefixer(transition, $properties, webkit moz spec);
    } @else {
      $properties: all 0.15s ease-out 0s;
      @include prefixer(transition, $properties, webkit moz spec);
    }
  }
}

@mixin transition-property($properties...) {
  -webkit-transition-property: transition-property-names($properties, "webkit");
     -moz-transition-property: transition-property-names($properties, "moz");
          transition-property: transition-property-names($properties, false);
}

@mixin transition-duration($times...) {
  @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function($motions...) {
  // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
  @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay($times...) {
  @include prefixer(transition-delay, $times, webkit moz spec);
}
